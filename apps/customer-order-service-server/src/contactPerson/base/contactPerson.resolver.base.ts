/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContactPerson } from "./ContactPerson";
import { ContactPersonCountArgs } from "./ContactPersonCountArgs";
import { ContactPersonFindManyArgs } from "./ContactPersonFindManyArgs";
import { ContactPersonFindUniqueArgs } from "./ContactPersonFindUniqueArgs";
import { CreateContactPersonArgs } from "./CreateContactPersonArgs";
import { UpdateContactPersonArgs } from "./UpdateContactPersonArgs";
import { DeleteContactPersonArgs } from "./DeleteContactPersonArgs";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { Customer } from "../../customer/base/Customer";
import { ContactPersonService } from "../contactPerson.service";
@graphql.Resolver(() => ContactPerson)
export class ContactPersonResolverBase {
  constructor(protected readonly service: ContactPersonService) {}

  async _contactPeopleMeta(
    @graphql.Args() args: ContactPersonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContactPerson])
  async contactPeople(
    @graphql.Args() args: ContactPersonFindManyArgs
  ): Promise<ContactPerson[]> {
    return this.service.contactPeople(args);
  }

  @graphql.Query(() => ContactPerson, { nullable: true })
  async contactPerson(
    @graphql.Args() args: ContactPersonFindUniqueArgs
  ): Promise<ContactPerson | null> {
    const result = await this.service.contactPerson(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContactPerson)
  async createContactPerson(
    @graphql.Args() args: CreateContactPersonArgs
  ): Promise<ContactPerson> {
    return await this.service.createContactPerson({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ContactPerson)
  async updateContactPerson(
    @graphql.Args() args: UpdateContactPersonArgs
  ): Promise<ContactPerson | null> {
    try {
      return await this.service.updateContactPerson({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactPerson)
  async deleteContactPerson(
    @graphql.Args() args: DeleteContactPersonArgs
  ): Promise<ContactPerson | null> {
    try {
      return await this.service.deleteContactPerson(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Order], { name: "orders" })
  async findOrders(
    @graphql.Parent() parent: ContactPerson,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: ContactPerson
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
